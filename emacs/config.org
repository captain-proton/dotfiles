#+TITLE:  DOOM EMACS CONFIGURATION
#+DATE:    June 28, 2022

* Environment

The Doom emacs server is started using a user systemd service file. Some
environment variables are set after the daemon has started, for example
files in ~/etc/profile.d/~. In order for emacs to work properly doom should
load a envvars file that can be generated using the command ~doom env~.
This command is executed at the end of the emacs.yml playbook in this
repository.

#+begin_src emacs-lisp
(doom-load-envvars-file "~/.emacs.d/.local/env")
#+end_src

** References

- [[https://github.com/doomemacs/doomemacs/issues/1053#issuecomment-466888282][Why not copy environment variables from the shell under Linux? #1053]]
- [[https://github.com/doomemacs/doomemacs/issues/5760][doom-load-envvars-file does not set environment but rather only defaults for subprocesses to inherit #5760]]

* Emacs Frame

Set the frame title to a format of "~<buffer name> in [<project name>]"~.

#+begin_src emacs-lisp
(setq frame-title-format
    '(""
      "%b"
      (:eval
       (let ((project-name (projectile-project-name)))
         (unless (string= "-" project-name)
           (format " in [%s]" project-name))))))
#+end_src

Show the current workspace/perspective name.

#+begin_src emacs-lisp
(setq doom-modeline-persp-name t)
#+end_src

* Cursor settings

Let the cursor blink. This is especially useful using the nord color theme in emacs because brackets get a background color that let the cursor nearly dissappear.

#+begin_src emacs-lisp
(blink-cursor-mode 1)
#+end_src

* Dired

Dired opens a new buffer when entering a new directory by default.
Set this insane named variable to prevent this behaviour.

#+begin_src emacs-lisp
(setq dired-kill-when-opening-new-dired-buffer t)
#+end_src

** Keybindings

=SPC d= is not used by default (yeah), so use it to run dired actions.

#+begin_src emacs-lisp
(map! :leader
      (:prefix ("d" . "dired")
       :desc "Open dired" "d" #'dired
       :desc "Dired jump to current" "j" #'dired-jump))

(evil-define-key 'normal dired-mode-map
  (kbd "M-RET") 'dired-display-file
  (kbd "m") 'dired-mark
  (kbd "t") 'dired-toggle-marks
  (kbd "u") 'dired-unmark
  (kbd "C") 'dired-do-copy
  (kbd "D") 'dired-do-delete
  (kbd "J") 'dired-goto-file
  (kbd "M") 'dired-do-chmod
  (kbd "O") 'dired-do-chown
  (kbd "P") 'dired-do-print
  (kbd "R") 'dired-do-rename
  (kbd "T") 'dired-do-touch
  (kbd "Y") 'dired-copy-filenamecopy-filename-as-kill ; copies filename to kill ring.
  (kbd "Z") 'dired-do-compress
  (kbd "+") 'dired-create-directory
  (kbd "% l") 'dired-downcase
  (kbd "% m") 'dired-mark-files-regexp
  (kbd "% u") 'dired-upcase
  (kbd "* %") 'dired-mark-files-regexp
  (kbd "* .") 'dired-mark-extension
  (kbd "* /") 'dired-mark-directories)
;; Get file icons in dired
(add-hook 'dired-mode-hook 'all-the-icons-dired-mode)
;; With dired-open plugin, you can launch external programs for certain extensions
;; As is I am/was also a kde user, use gwenview for images and vlc for videos
(setq dired-open-extensions '(("gif" . "gwenview")
                              ("jpg" . "gwenview")
                              ("png" . "gwenview")
                              ("mkv" . "vlc")
                              ("mp4" . "vlc")))
#+end_src

* Global Auto Revert

Enable global auto revert mode, to keep buffers in sync with files on disk, when they change outside of emacs.
Apply this behaviour to non file buffers, which is useful for example dired.

#+begin_src emacs-lisp
(global-auto-revert-mode 1)
(setq global-auto-revert-non-file-buffers t)
#+end_src

* Neotree

#+begin_src emacs-lisp
(after! neotree
  (setq doom-themes-neotree-file-icons t
        neo-theme (if (window-system) 'icons 'arrow)
        neo-window-width 40
        neo-window-fixed-size nil
        )
  )
#+end_src

* Editor

Save buffer to file after leaving insert mode.

#+begin_src emacs-lisp
(add-hook 'evil-insert-state-exit-hook
          (lambda ()
            (when (buffer-file-name)
              (call-interactively #'save-buffer))))
#+end_src

** Keybindings

| Keybinding | Description             |
|------------+-------------------------|
| ~C-+~        | ~doom increase font size~ |
| ~C--~        | ~doom decrease font size~ |
| ~C-=~        | ~doom reset font size~    |

#+begin_src emacs-lisp
(map! :nvi "C-+" #'doom/increase-font-size
      :nvi "C--" #'doom/decrease-font-size
      :nvi "C-=" #'doom/reset-font-size
      )

(after! evil
  (map! :i "C-V" #'evil-paste-before-cursor-after
        :i "C-v" #'evil-paste-after
        )
  )
#+end_src

** Whitespace mode

Activate whitespace-mode globally except for org-mode.

#+begin_src emacs-lisp
(setq whitespace-style '(face tabs tab-mark spaces space-mark trailing
                              lines-tail)
      whitespace-line-column 140)
(setq whitespace-global-modes '(yaml-mode python-mode go-mode java-mode rustic-mode prog-mode))
(global-whitespace-mode +1)
#+end_src

** Highlight thing

Activate highlight of current selected word under cursor or selection when in visual.

#+begin_src emacs-lisp
(defun proton/set-highlight-thing-colors ()
  (set-face-background 'highlight-thing (doom-darken (doom-color 'highlight) 0.4))
  (set-face-foreground 'highlight-thing (doom-lighten (doom-color 'fg) 0.4)))
(add-hook! 'highlight-thing-mode-hook #'proton/set-highlight-thing-colors)

(global-highlight-thing-mode)
(setq highlight-thing-what-thing 'sexp)
#+end_src

** Fringes

Activate fringe by default.

#+begin_src emacs-lisp
(add-hook! 'start-mode-hook
  (fringe-mode '(nil . nil)))
#+end_src

Disable fringe-mode on writeroom and activate it again when leaving. This is espacially useful when toggling presentations.

#+begin_src emacs-lisp
(defun proton/fringe-on-zen ()
  (if (bound-and-true-p writeroom-mode)
      (fringe-mode 0)
    (fringe-mode '(nil . nil))))
(add-hook 'writeroom-mode-hook 'proton/fringe-on-zen)
#+end_src

** Tree Sitter

~tree-sitter~ is a parsing system for source code and other structured text file formats. The module provides for example syntax highlighting for major modes that are known by emacs. Take a look at the [[https://emacs-tree-sitter.github.io/getting-started/][getting started guide]] of the emacs tree sitter package. The following lines will activate syntax highlighting for tree sitter for all known languages.

#+begin_src emacs-lisp
(global-tree-sitter-mode)
(add-hook 'tree-sitter-after-on-hook #'tree-sitter-hl-mode)
#+end_src

** Line spacing

Increase space between lines.

#+begin_src emacs-lisp
(setq-default line-spacing 4)
#+end_src

* Multiple cursors

#+begin_src emacs-lisp
(evil-define-key nil evil-visual-state-map
  (kbd "A") 'evil-mc-make-cursor-in-visual-selection-end
  (kbd "I") 'evil-mc-make-cursor-in-visual-selection-beg
  (kbd "M-n") 'evil-mc-make-and-goto-next-match
  (kbd "M-p") 'evil-mc-make-and-goto-prev-match
  )
#+end_src

* Project workflow

I tend to use multiple frames when working on projects. So it makes sense to close everything related to the project, when closing it.

#+begin_src emacs-lisp
(defun proton/close-project ()
  "Close the current frame and delete all buffers associated to the project"
  (interactive)
  (if (> (length (+workspace-list-names)) 1)
      (progn (mapc 'kill-buffer (+workspace-buffer-list))
             (+workspace/delete (+workspace-current-name)))
    (evil-quit)))

(map! :leader
      :desc "Quit project" "p q" #'proton/close-project)
#+end_src

* Tabs

Group buffers in some modes and set to group by project by default.

#+begin_src emacs-lisp
 (use-package! centaur-tabs
   :init
   (centaur-tabs-group-by-projectile-project)
   :config
   (centaur-tabs-headline-match)
   (centaur-tabs-mode t)
   (setq uniquify-separator "/")
   (setq uniquify-buffer-name-style 'forward)
   (defun centaur-tabs-buffer-groups ()
     "`centaur-tabs-buffer-groups' control buffers' group rules.

 Group centaur-tabs with mode if buffer is derived from `eshell-mode' `emacs-lisp-mode' `dired-mode' `org-mode' `magit-mode'.
 All buffer name start with * will group to \"Emacs\".
 Other buffer group by `centaur-tabs-get-group-name' with project name."
     (list
      (cond
       ;; ((not (eq (file-remote-p (buffer-file-name)) nil))
       ;; "Remote")
       ((or (string-equal "*" (substring (buffer-name) 0 1))
            (memq major-mode '(magit-process-mode
                               magit-status-mode
                               magit-diff-mode
                               magit-log-mode
                               magit-file-mode
                               magit-blob-mode
                               magit-blame-mode
                               )))
        "Emacs")
       ((derived-mode-p 'prog-mode)
        "Editing")
       ((derived-mode-p 'dired-mode)
        "Dired")
       ((memq major-mode '(helpful-mode
                           help-mode))
        "Help")
       ((memq major-mode '(org-mode
                           org-agenda-clockreport-mode
                           org-src-mode
                           org-agenda-mode
                           org-present-mode
                           org-indent-mode
                           org-bullets-mode))
        "OrgMode")
       (t (centaur-tabs-get-group-name (current-buffer))))))
   :hook
   (dashboard-mode . centaur-tabs-local-mode)
   (term-mode . centaur-tabs-local-mode)
   (calendar-mode . centaur-tabs-local-mode)
   (org-agenda-mode . centaur-tabs-local-mode)
   (helpful-mode . centaur-tabs-local-mode)
   :bind
   ("C-<prior>" . centaur-tabs-backward)
   ("C-<next>" . centaur-tabs-forward)
   ("C-c t s" . centaur-tabs-counsel-switch-group)
   ("C-c t p" . centaur-tabs-group-by-projectile-project)
   ("C-c t g" . centaur-tabs-group-buffer-groups)
   (:map evil-normal-state-map
    ("g t" . centaur-tabs-forward)
    ("g T" . centaur-tabs-backward))
   )
#+end_src

#+RESULTS:
: centaur-tabs-backward

* Identity

Some functionality uses this to identify you, e.g. GPG configuration, email
clients, file templates and snippets. It is optional.

#+begin_src emacs-lisp
(setq user-full-name "Nils Verheyen"
      user-mail-address "nils@ungerichtet.de")
#+end_src

* Layout

Doom exposes five (optional) variables for controlling fonts in Doom:

- `DOOMu-font' -- the primary font to use
- `doom-variable-pitch-font' -- a non-monospace font (where applicable)
- `doom-big-font' -- used for `doom-big-font-mode'; use this for
   presentations or streaming.
- `doom-unicode-font' -- for unicode glyphs
- `doom-serif-font' -- for the `fixed-pitch-serif' face

See 'C-h v doom-font' for documentation and more examples of what they
accept. For example:

If you or Emacs can't find your font, use 'M-x describe-font' to look them
up, `M-x eval-region' to execute elisp code, and 'M-x doom/reload-font' to
refresh your font settings. If Emacs still can't find your font, it likely
wasn't installed correctly. Font issues are rarely Doom issues!

#+begin_src emacs-lisp
;; Set reusable font name variables
(defvar proton/fixed-width-font "JetBrainsMono Nerd Font"
  "The font to use for monospaced (fixed width) text.")

(defvar proton/variable-width-font "Noto Sans"
  "The font to use for variable-pitch (document) text.")

(setq doom-font (font-spec :family proton/fixed-width-font :size 15)
      doom-variable-pitch-font (font-spec :family proton/variable-width-font :size 15)
      doom-unicode-font (font-spec :family proton/fixed-width-font :size 15)
      doom-big-font (font-spec :family proton/variable-width-font :size 24)
      doom-font-increment 1)

(after! doom-themes
  (setq doom-themes-enable-bold t
        doom-themes-enable-italic t))

(custom-set-faces!
  '(font-lock-comment-face :slant italic)
  '(font-lock-keyword-face :slant italic))
#+end_src

There are two ways to load a theme. Both assume the theme is installed and
available. You can either set `doom-theme' or manually load a theme with the
`load-theme' function. This is the default:

#+begin_src emacs-lisp
(setq doom-theme 'doom-nord)
#+end_src

This determines the style of line numbers in effect. If set to `nil', line
numbers are disabled. For relative line numbers, set this to `relative'.
#+begin_src emacs-lisp
(setq display-line-numbers-type 'relative)
#+end_src

Whenever you reconfigure a package, make sure to wrap your config in an
`after!' block, otherwise Doom's defaults may override your settings. E.g.

  (after! PACKAGE
    (setq x y))

The exceptions to this rule:

  - Setting file/directory variables (like `org-directory')
  - Setting variables which explicitly tell you to set them before their
    package is loaded (see 'C-h v VARIABLE' to look up their documentation).
  - Setting doom variables (which start with 'doom-' or '+').

Here are some additional functions/macros that will help you configure Doom.

- `load!' for loading external *.el files relative to this one
- `use-package!' for configuring packages
- `after!' for running code after a package has loaded
- `add-load-path!' for adding directories to the `load-path', relative to
  this file. Emacs searches the `load-path' when you load packages with
  `require' or `use-package'.
- `map!' for binding new keys

To get information about any of these functions/macros, move the cursor over
the highlighted symbol at press 'K' (non-evil users must press 'C-c c k').
This will open documentation for it, including demos of how they are used.
Alternatively, use `C-h o' to look up a symbol (functions, variables, faces,
etc).

You can also try 'gd' (or 'C-c c d') to jump to their definition and see how
they are implemented.

#+begin_src emacs-lisp
(add-to-list 'default-frame-alist '(fullscreen . maximized))
#+end_src


** Dashboard

#+begin_src emacs-lisp
;; (setq fancy-splash-image (expand-file-name "splash/doom-emacs-splash.svg" doom-private-dir))
;; (setq local-settings-file (format "%s/local.el" (getenv "DOOMDIR")))
(setq initial-buffer-choice (format "%s/start.org" (getenv "DOOMDIR")))

(define-minor-mode start-mode
  "Provide functions for custom start page."
  :lighter " start"
  :keymap (let ((map (make-sparse-keymap)))
            ;;(define-key map (kbd "M-z") 'eshell)
            (evil-define-key 'normal start-mode-map
              (kbd "1") '(lambda () (interactive) (find-file (format "%s/config.org" (getenv "DOOMDIR"))))
              (kbd "2") '(lambda () (interactive) (find-file (format "%s/init.el" (getenv "DOOMDIR"))))
              (kbd "3") '(lambda () (interactive) (find-file (format "%s/packages.el" (getenv "DOOMDIR")))))
            map)
  (+zen/toggle)
  (display-line-numbers-mode -1))

(add-hook 'start-mode-hook 'read-only-mode) ;; make start.org read-only; use 'SPC t r' to toggle off read-only.
(provide 'start-mode)
#+end_src

* Ansible

Set the ansible vault password file according to the settings inside
the dotfiles ansible configuration.

#+begin_src emacs-lisp
(with-temp-buffer
  (insert-file-contents "~/dotfiles/ansible.cfg")
  (keep-lines "vault_password_file" (point-min) (point-max))
  (setq ansible-vault-password-file
        (when (string-match "vault_password_file\s+=\s+\\(.*\\)"
                            (buffer-string))
          (match-string 1 (buffer-string)))))
#+end_src

Define ansible yaml minor mode.
Normally a ansible role contains at least the =tasks= and =defaults= folder and some =main.yml= files.
There are no other conventions for structuring an ansible project.
It may be make some sense to keep playbooks and roles inside the project in order to share it via vcs.

#+begin_src emacs-lisp
(def-project-mode! +ansible-yaml-mode
  :modes '(yaml-mode)
  :add-hooks '(ansible ansible-auto-decrypt-encrypt ansible-doc-mode)
  :files (or "playbooks/" "roles/" (and "tasks/main.yml" "defaults/")))
#+end_src

* Custom machine settings

All settings that are unique to the machine should be kept inside the
~$DOOMDIR/local.el~ file. Look at the emacs.yml playbook. There should
be a task that links the ~dotfiles/emacs/local.el~ if one was found.

#+begin_src emacs-lisp
(setq local-settings-file (format "%s/local.el" (getenv "DOOMDIR")))
(when (file-exists-p local-settings-file)
  (load local-settings-file))
#+end_src

* Structure templates

Configure structure templates for org mode ~begin_src~ blocks.

#+begin_src emacs-lisp
(require 'org-tempo)
(add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
(add-to-list 'org-structure-template-alist '("sh" . "src sh"))
(add-to-list 'org-structure-template-alist '("py" . "src python"))
#+end_src

* Elfeed

Use ~elfeed-org~ to configure feeds. All feeds are listed in the ~elfeed.org~ file along this config.

#+begin_src emacs-lisp
(after! elfeed
  (elfeed-org)
  (defadvice! cp/elfeed-in-own-workspace (&rest _)
  "Open Elfeed in its own workspace."
  :before #'elfeed
  (when (modulep! :ui workspaces)
    (+workspace-switch "Elfeed" t)))
  )
(custom-set-faces!
  '(elfeed-search-unread-title-face
    :weight normal)
  '(elfeed-search-title-face
    :family "Vollkorn"
    :height 1.4)
  )
(add-hook! 'elfeed-show-mode-hook (hide-mode-line-mode 1))
(add-hook! 'elfeed-search-update-hook #'hide-mode-line-mode)

(setq )
#+end_src

As of this writing the elfeed configuration does not show the date column by default.
It can be helpful to show this column after several days or weeks of not reading any feeds.
Thanks to Hieu Phay for the [[https://hieuphay.com/doom-emacs-config/#elfeeds][elfeed configuration]].

#+begin_src emacs-lisp
(use-package! elfeed
  :config
  (defun cp/elfeed-entry-line-draw (entry)
    "Print ENTRY to the buffer."
    (let* ((date (elfeed-search-format-date (elfeed-entry-date entry)))
           (title (or (elfeed-meta entry :title) (elfeed-entry-title entry) ""))
           (title-faces (elfeed-search--faces (elfeed-entry-tags entry)))
           (feed (elfeed-entry-feed entry))
           (feed-title
            (when feed
              (or (elfeed-meta feed :title) (elfeed-feed-title feed))))
           (tags (mapcar #'symbol-name (elfeed-entry-tags entry)))
           (tags-str (concat "[" (mapconcat 'identity tags ",") "]"))
           (title-width (- (window-width) elfeed-goodies/feed-source-column-width
                           elfeed-goodies/tag-column-width 4))
           (title-column (elfeed-format-column
                          title (elfeed-clamp
                                 elfeed-search-title-min-width
                                 title-width
                                 elfeed-search-title-max-width)
                          :left))
           (tag-column (elfeed-format-column
                        tags-str (elfeed-clamp (length tags-str)
                                               elfeed-goodies/tag-column-width
                                               elfeed-goodies/tag-column-width)
                        :left))
           (feed-column (elfeed-format-column
                         feed-title (elfeed-clamp elfeed-goodies/feed-source-column-width
                                                  elfeed-goodies/feed-source-column-width
                                                  elfeed-goodies/feed-source-column-width)
                         :left))
           ;; (entry-score (elfeed-format-column (number-to-string (elfeed-score-scoring-get-score-from-entry entry)) 6 :left))
           ;; (entry-authors (concatenate-authors
           ;;                 (elfeed-meta entry :authors)))
           ;; (authors-column (elfeed-format-column entry-authors elfeed-goodies/tag-column-width :left))
           )
      (if (>= (window-width) (* (frame-width) elfeed-goodies/wide-threshold))
          (progn
            ;; (insert (propertize entry-score 'face 'elfeed-search-feed-face) " ")
            (insert (propertize date 'face 'elfeed-search-date-face) " ")
            (insert (propertize feed-column 'face 'elfeed-search-feed-face) " ")
            (insert (propertize tag-column 'face 'elfeed-search-tag-face) " ")
            ;; (insert (propertize authors-column 'face 'elfeed-search-tag-face) " ")
            (insert (propertize title 'face title-faces 'kbd-help title))
            )
        (insert (propertize title 'face title-faces 'kbd-help title)))))

  (defun search-header/draw-wide (separator-left separator-right search-filter stats db-time)
    (let* ((update (format-time-string "%Y-%m-%d %H:%M:%S %z" db-time))
           (lhs (list
                 (powerline-raw (-pad-string-to "Date" (- 9 4)) 'powerline-active2 'l)
                 (funcall separator-left 'powerline-active2 'powerline-active1)
                 (powerline-raw (-pad-string-to "Feed" (- elfeed-goodies/feed-source-column-width 4)) 'powerline-active1 'l)
                 (funcall separator-left 'powerline-active1 'powerline-active2)
                 (powerline-raw (-pad-string-to "Tags" (- elfeed-goodies/tag-column-width 6)) 'powerline-active2 'l)
                 (funcall separator-left 'powerline-active2 'mode-line)
                 (powerline-raw "Subject" 'mode-line 'l)))
           (rhs (search-header/rhs separator-left separator-right search-filter stats update)))
      (concat (powerline-render lhs)
              (powerline-fill 'mode-line (powerline-width rhs))
              (powerline-render rhs))))

  (setq rmh-elfeed-org-files (list "~/Org/elfeed.org")
        elfeed-search-print-entry-function 'cp/elfeed-entry-line-draw
        elfeed-search-filter "@2-weeks-ago +unread"
        elfeed-search-title-min-width 80
        elfeed-goodies/tag-column-width 20
        +rss-enable-sliced-images nil
        visual-fill-column-mode 1)
  )
#+end_src

#+begin_src emacs-lisp
(map! :leader
      :prefix ("o" . "open")
      :desc "Elfeed" "e" #'elfeed)
#+end_src

* PlantUML

Not much to do here, but the default indent level is =8= ... wtf.

#+begin_src emacs-lisp
(after! plantuml
  (setq plantuml-indent-level 2)
  )
#+end_src

* nov.el

=nov.el= provides a major mode to read epub documents. ~bsdtar~ should be installed on the system, along with emacs compiled with libxml2 (~pacman -Qi emacs-nativecomp | grep libxml2~).

#+begin_src emacs-lisp
(setq nov-unzip-program (executable-find "bsdtar")
      nov-unzip-args '("-xC" directory "-f" filename))
(add-to-list 'auto-mode-alist '("\\.epub\\'" . nov-mode))
#+end_src

#+begin_src emacs-lisp
(defun proton/nov-font-setup ()
  (face-remap-add-relative 'variable-pitch :family "Vollkorn"
                                           :height 1.4))
(add-hook 'nov-mode-hook 'proton/nov-font-setup)
#+end_src

#+begin_src emacs-lisp
(use-package! nov
  :mode ("\\.epub\\'" . nov-mode)
  :config
  (map! :map nov-mode-map
        :n "RET" #'nov-scroll-up)

  (advice-add 'nov-render-title :override #'ignore)

  (defun +nov-mode-setup ()
    "Tweak nov-mode to our liking."
    (face-remap-add-relative 'variable-pitch
                             :family "Vollkorn"
                             :height 1.4)
    (face-remap-add-relative 'default :height 1.3)
    (require 'visual-fill-column nil t)
    (setq-local visual-fill-column-center-text t
                visual-fill-column-width 101
                nov-text-width 100
                )
    (visual-fill-column-mode 1)
    (highlight-thing-mode 0)
    (hl-line-mode -1)
    ;; Re-render with new display settings
    (nov-render-document))

  (add-hook 'nov-mode-hook #'+nov-mode-setup)
  )
#+end_src

* Hideshow - Block visibility

Hideshow is installed by default using doom. You can collapse/fold blocks in supported programming and markup languages, for example ={= - =}= in Rust, C++, JSON and so on.

** General

The default key bindings are somewhat ... ( =C-c @ C-c= ). Better to use something like =SPC t h= to toggle a hiding.

#+begin_src emacs-lisp
(require 'hideshow)

;; optional key bindings, easier than hs defaults
(map! :leader
      (:prefix ("t" . "toggle")
       :desc "Toggle hiding of block"
       "h" #'hs-toggle-hiding))
#+end_src

** XML

Add XML folding support for hideshow.

#+begin_src emacs-lisp
(require 'nxml-mode)
(require 'sgml-mode)

(add-to-list 'hs-special-modes-alist
             '(nxml-mode
               "<!--\\|<[^/>]*[^/]>"
               "-->\\|</[^/>]*[^/]>"

               "<!--"
               sgml-skip-tag-forward
               nil))
#+end_src

** Rust

=C=, =C++=, =Java= ... are already included, Rust is missing.

#+begin_src emacs-lisp
(add-to-list 'hs-special-modes-alist
             '(rustic-mode "{" "}" "/[*/]" nil nil))
#+end_src

* ORG

** Org Mode Appearance

#+begin_src emacs-lisp
(defun proton/org-colors-nord ()
  "Enable Nord colors for Org headers."
  (interactive)
  (dolist
      (face
       '((org-level-1 1.7 "#81a1c1" bold)
         (org-level-2 1.6 "#b48ead" bold)
         (org-level-3 1.5 "#a3be8c" semi-bold)
         (org-level-4 1.4 "#ebcb8b" normal)
         (org-level-5 1.3 "#bf616a" light)
         (org-level-6 1.2 "#88c0d0" light)
         (org-level-7 1.1 "#81a1c1" light)
         (org-level-8 1.0 "#b48ead" light)))
    (set-face-attribute (nth 0 face) nil
                        :font doom-variable-pitch-font
                        :height (nth 1 face)
                        :foreground (nth 2 face)
                        :weight (nth 3 face)))
  (set-face-attribute 'org-table nil
                      :font doom-font
                      :weight 'normal
                      :height 1.0
                      :foreground "#bfafdf"))

(proton/org-colors-nord)
#+end_src

#+begin_src emacs-lisp
(require 'org-faces)

;; Make sure certain org faces use the fixed-pitch face when variable-pitch-mode is on
(set-face-attribute 'org-block nil :foreground nil :font proton/fixed-width-font :height 1.0 :weight 'light)
#+end_src


** Org Mode settings

If you use `org' and don't want your org files in the default location below,
change `org-directory'. It must be set before org loads!

#+begin_src emacs-lisp
(defvar proton/org-notes-dir (file-truename "~/Org/notes")
  "Directory containing all my org notes files")
(setq org-directory proton/org-notes-dir
      org-agenda-files (list proton/org-notes-dir))
#+end_src

Anything else at the moment can be set after org was loaded.

#+begin_src emacs-lisp
(after! org
  (setq org-log-done 'time
        org-todo-keywords
        '((sequence
           "TODO(t)"            ; Backlog items in kanban that should be executed
           "DOING(o)"           ; Things that are currently in work (work in progress)
           "WAIT(w)"            ; A task that can not be set as DOING
           "|"                  ; Separate active and inactive items
           "DONE(d)"            ; Finished work ... yeah
           "CANCELLED(c@)"))    ; Cancelled things :(
        org-todo-repeat-to-state "TODO"
        org-ellipsis " ▾"
        org-hide-emphasis-markers t
        org-superstar-headline-bullets-list '("⁖" "◉" "○" "✸" "✿"))
  )
#+end_src

** Org auto tangle

Automatically tangle org files on save. This is done by adding the option ~#+auto_tangle: t~ in your org file.

#+begin_src emacs-lisp
(use-package! org-auto-tangle
  :defer t
  :hook (org-mode . org-auto-tangle-mode)
  :config
  (setq org-auto-tangle-default t)
  )
#+end_src

** Presentations with org-present

Use visual-line-mode here to cause lines to be wrapped within the
centered document, otherwise you will have to horizontally scroll to see
them all!

#+begin_src emacs-lisp
(setq visual-fill-column-width 110
      visual-fill-column-center-text t)
#+end_src

Define functions that should be executed entering and leaving
org-present.

#+begin_src emacs-lisp
(defun proton/org-present-prepare-slide (buffer-name heading)
  ;; Show only top-level headlines
  (org-overview)

  ;; Unfold the current entry
  (org-show-entry)

  ;; Show only direct subheadings of the slide but don't expand them
  (org-show-children))

(defun proton/org-present-start ()
  ;; Center the presentation and wrap lines
  (visual-fill-column-mode 1)
  (visual-line-mode 1)
  (doom-big-font-mode 1)
  (display-line-numbers-mode 0)
  (hl-line-mode 0)
  (highlight-thing-mode 0)
  (centaur-tabs-mode 0)
  (variable-pitch-mode 1)

  ;; Tweak font sizes
  (setq-local face-remapping-alist '((default (:height 1.4) variable-pitch)
                                     (header-line (:height 2.2) variable-pitch)
                                     (org-document-title (:height 1.75) org-document-title)
                                     (org-code (:height 1.0) org-code)
                                     (org-verbatim (:height 1.0) org-verbatim)
                                     (org-block (:height 0.9) org-block)
                                     (org-block-begin-line (:height 0.4) org-block)))

  ;; Set a blank header line string to create blank space at the top
  (setq header-line-format " ")

  ;; Display inline images automatically
  (org-display-inline-images)
  )

(defun proton/org-present-end ()
  ;; Stop centering the document
  (visual-fill-column-mode 0)
  (visual-line-mode 0)
  (doom-big-font-mode 0)
  (display-line-numbers-mode 1)
  (hl-line-mode 1)
  (highlight-thing-mode 1)
  (centaur-tabs-mode 1)
  (variable-pitch-mode 0)

  ;; Reset font customizations, default was nil
  (setq-local face-remapping-alist nil)

  ;; Clear the header line string so that it isn't displayed
  (setq header-line-format nil)

  ;; Stop displaying inline images
  (org-remove-inline-images)
  )
#+end_src

Register hooks with org-present.

#+begin_src emacs-lisp
(add-hook 'org-present-mode-hook 'proton/org-present-start)
(add-hook 'org-present-mode-quit-hook 'proton/org-present-end)
(add-hook 'org-present-after-navigate-functions 'proton/org-present-prepare-slide)
#+end_src

** Personal Knowledge Base using Org roam

Create the ~$HOME/Org/roam~ directory if it does not exists.
This directory will be used as ~org-roam-directory~.

#+begin_src emacs-lisp
(setq proton/org-roam-home (format "%s/Org/roam" (getenv "HOME")))
(when (not (file-directory-p proton/org-roam-home))
  (make-directory proton/org-roam-home 'parents))

(setq org-roam-directory (file-truename proton/org-roam-home))
(org-roam-db-autosync-mode)
#+end_src

Open org roam notes in new workspace.

#+begin_src emacs-lisp
(after! (org-roam)
  (defadvice! yeet/org-roam-in-own-workspace-a (&rest _)
  "Open all roam buffers in there own workspace."
  :before #'org-roam-node-find
  :before #'org-roam-node-random
  :before #'org-roam-buffer-display-dedicated
  :before #'org-roam-buffer-toggle
  :before #'org-roam-dailies-goto-today
  (when (modulep! :ui workspaces)
    (+workspace-switch "Org-roam" t))))
#+end_src

** User interface for Org roam

#+begin_src emacs-lisp
(use-package! websocket
    :after org-roam)

(use-package! org-roam-ui
    :after org-roam ;; or :after org
;;         normally we'd recommend hooking org-roam-ui after org-roam, but since org-roam does not have
;;         a hookable mode anymore, you're advised to pick something yourself
;;         if you don't care about startup time, use
;;  :hook (after-init . org-roam-ui-mode)
    :config
    (setq org-roam-ui-sync-theme t
          org-roam-ui-follow t
          org-roam-ui-update-on-save t
          org-roam-ui-open-on-start t))
#+end_src

* Programming

#+begin_src emacs-lisp
(require 'asdf-vm)
(asdf-vm-init)
#+end_src

** General Keybindings

#+begin_src emacs-lisp
(map!
 :map lsp-ui-mode-map
 [remap xref-find-definitions] #'lsp-ui-peek-find-definitions
 [remap xref-find-references] #'lsp-ui-peek-find-references
 )

(defun proton/toggle-comment ()
  (interactive)
  (evilnc-comment-or-uncomment-lines 1)
  (evil-next-line 1))
(map!
 :desc "toggle line comment" :ne "C-/" #'proton/toggle-comment
 )
#+end_src

** Python

Add fill column indicator in python mode.

#+begin_src emacs-lisp
(add-hook! python-mode #'display-fill-column-indicator-mode)
#+end_src

** Rust

Add fill column indicator in rust mode.

#+begin_src emacs-lisp
(add-hook! rust-mode #'display-fill-column-indicator-mode)
#+end_src

** Julia

Add julia support in org babel.

#+begin_src emacs-lisp
;; Load ob-ess-julia and dependencies
(use-package! ob-ess-julia
  :ensure t
  :config
  ;; Add ess-julia into supported languages:
  (org-babel-do-load-languages 'org-babel-load-languages
                               (append org-babel-load-languages
                                       '((ess-julia . t))))
  ;; Link this language to ess-julia-mode (although it should be done by default):
  (setq org-src-lang-modes
        (append org-src-lang-modes '(("ess-julia" . ess-julia)))))
#+end_src

* Java

Setup java runtimes installed on the local machine. In case of using asdf-vm this may be something like the following.

#+begin_example elisp
(:name "JavaSE-17" :path (format "%s/.asdf/installs/java/adoptopenjdk-17.0.7+7" (getenv "HOME")))
#+end_example


#+begin_src emacs-lisp
(use-package! lsp-java
  :after lsp
  :init (when (boundp local/lsp-java-configuration-runtimes)
          (setq lsp-java-configuration-runtimes local/lsp-java-configuration-runtimes))
  )
#+end_src

* DAP

#+begin_src emacs-lisp
(setq dap-auto-configure-mode t)

;; Displaying DAP visuals.
(dap-ui-mode t)

;; enables mouse hover support
(dap-tooltip-mode t)

;; use tooltips for mouse hover
;; if it is not enabled `dap-mode' will use the minibuffer.
(tooltip-mode t)

;; displays floating panel with debug buttons
;; requies emacs 26+
(dap-ui-controls-mode t)

(use-package! dap-mode
  :config
  ;; call dap-hydra after a breakpoint has been hit
  (add-hook 'dap-stopped-hook
            (lambda (arg) (call-interactively #'dap-hydra)))
  )
#+end_src

** Python

Enable debugging support for python. Set ~debugpy~ as default debugger. ~debugpy~ should be installed as a dev dependency inside projects that use virtual envs, therefor all of them.

#+begin_src emacs-lisp
(use-package! dap-mode
  :after lsp-mode
  :commands dap-debug
  :hook ((python-mode . dap-ui-mode) (python-mode . dap-mode))
  :config
  (require 'dap-python)
  (setq dap-python-debugger 'debugpy)
  (defun dap-python--pyenv-executable-find (command)
    (with-venv (executable-find "python"))))
#+end_src

** Rust

#+begin_src emacs-lisp
(require 'dap-gdb-lldb)
(dap-register-debug-template "Rust::GDB Run Configuration"
                             (list :type "gdb"
                                   :request "launch"
                                   :name "GDB::Run"
                                   :gdbpath "rust-gdb"
                                   :target nil
                                   :cwd nil))
#+end_src
