#+TITLE:   config.org
#+PROPERTY: header-args :tangle config.el
#+auto-tangle: t
#+DATE:    June 28, 2022

Place your private configuration here! Remember, you do not need to run 'doom
sync' after modifying this file!

* Identity

Some functionality uses this to identify you, e.g. GPG configuration, email
clients, file templates and snippets. It is optional.

#+begin_src emacs-lisp
(setq user-full-name "Nils Verheyen"
      user-mail-address "nils@ungerichtet.de")
#+end_src

* Layout

Doom exposes five (optional) variables for controlling fonts in Doom:

- `DOOMu-font' -- the primary font to use
- `doom-variable-pitch-font' -- a non-monospace font (where applicable)
- `doom-big-font' -- used for `doom-big-font-mode'; use this for
   presentations or streaming.
- `doom-unicode-font' -- for unicode glyphs
- `doom-serif-font' -- for the `fixed-pitch-serif' face

See 'C-h v doom-font' for documentation and more examples of what they
accept. For example:

If you or Emacs can't find your font, use 'M-x describe-font' to look them
up, `M-x eval-region' to execute elisp code, and 'M-x doom/reload-font' to
refresh your font settings. If Emacs still can't find your font, it likely
wasn't installed correctly. Font issues are rarely Doom issues!

#+begin_src emacs-lisp
(setq doom-font (font-spec :family "MesloLGS NF" :size 13 :weight 'normal)
      doom-variable-pitch-font (font-spec :family "MesloLGS NF" :size 13))
#+end_src

There are two ways to load a theme. Both assume the theme is installed and
available. You can either set `doom-theme' or manually load a theme with the
`load-theme' function. This is the default:

#+begin_src emacs-lisp
(setq doom-theme 'doom-nord)
#+end_src

This determines the style of line numbers in effect. If set to `nil', line
numbers are disabled. For relative line numbers, set this to `relative'.
#+begin_src emacs-lisp
(setq display-line-numbers-type 'relative)
#+end_src

If you use `org' and don't want your org files in the default location below,
change `org-directory'. It must be set before org loads!
#+begin_src emacs-lisp
(setq org-directory "~/Dokumente/Org/")
#+end_src


Whenever you reconfigure a package, make sure to wrap your config in an
`after!' block, otherwise Doom's defaults may override your settings. E.g.

  (after! PACKAGE
    (setq x y))

The exceptions to this rule:

  - Setting file/directory variables (like `org-directory')
  - Setting variables which explicitly tell you to set them before their
    package is loaded (see 'C-h v VARIABLE' to look up their documentation).
  - Setting doom variables (which start with 'doom-' or '+').

Here are some additional functions/macros that will help you configure Doom.

- `load!' for loading external *.el files relative to this one
- `use-package!' for configuring packages
- `after!' for running code after a package has loaded
- `add-load-path!' for adding directories to the `load-path', relative to
  this file. Emacs searches the `load-path' when you load packages with
  `require' or `use-package'.
- `map!' for binding new keys

To get information about any of these functions/macros, move the cursor over
the highlighted symbol at press 'K' (non-evil users must press 'C-c c k').
This will open documentation for it, including demos of how they are used.
Alternatively, use `C-h o' to look up a symbol (functions, variables, faces,
etc).

You can also try 'gd' (or 'C-c c d') to jump to their definition and see how
they are implemented.

* Allow neotree to be resized

#+begin_src emacs-lisp
(after! neotree
    (setq neo-window-fixed-size nil)
    (setq neo-window-width 40))
#+end_src


* Line spacing

Increase space between lines.

#+begin_src emacs-lisp
(setq-default line-spacing 4)
#+end_src

* Ansible

Set the ansible vault password file according to the settings inside
the dotfiles ansible configuration.

#+begin_src emacs-lisp
(with-temp-buffer
  (insert-file-contents "~/dotfiles/ansible.cfg")
  (keep-lines "vault_password_file" (point-min) (point-max))
  (setq ansible-vault-password-file (when (string-match "vault_password_file\s+=\s+\\(.*\\)" (buffer-string))
                        (match-string 1 (buffer-string)))))
#+end_src

#+begin_src emacs-lisp
(def-project-mode! +ansible-yaml-mode
  :modes '(yaml-mode)
  :add-hooks '(ansible ansible-auto-decrypt-encrypt ansible-doc-mode)
  :files (or "playbooks/" "roles/" "tasks/" "handlers/"))
#+end_src

* Custom machine settings

All settings that are unique to the machine should be kept inside the
~$HOME/.doom.d/local.el~ file. Look at the emacs.yml playbook. There should
be a task that links the ~dotfiles/emacs/local.el~ if one was found.

#+begin_src emacs-lisp
(setq local-settings-file (format "%s/.doom.d/local.el" (getenv "HOME")))
(when (file-exists-p local-settings-file)
  (load local-settings-file))
#+end_src

* Structure templates

Configure structure templates for org mode ~begin_src~ blocks.

#+begin_src emacs-lisp
(require 'org-tempo)
(add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
(add-to-list 'org-structure-template-alist '("sh" . "src sh"))
(add-to-list 'org-structure-template-alist '("py" . "src python"))
#+end_src

* Org auto tangle

#+begin_src emacs-lisp
(use-package! org-auto-tangle
  :defer t
  :hook (org-mode . org-auto-tangle-mode)
  :config
  (setq org-auto-tangle-default t))
#+end_src
