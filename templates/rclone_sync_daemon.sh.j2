#!/bin/bash
## One-way, immediate, continuous, recursive, directory synchronization
##  to a remote Rclone URL. ( S3, SFTP, FTP, WebDAV, Dropbox, etc. )
## Optional desktop notifications on sync events or errors.
## Useful only for syncing a SMALL number of files (< 8192).
##  (See note in `man inotifywait` under `--recursive` about raising this limit.)
## Think use-case: Synchronize Traefik TLS certificates file (acme.json)
## Think use-case: Synchronize Keepass (.kdbx) database file immediately on save.
## Think use-case: Live edit source code and push to remote server

## This is NOT a backup tool!
## It will not help you if you delete your files or if they become corrupted.
## If you need a backup tool, check out https://borgbackup.readthedocs.io/en/stable/quickstart.html

## Setup: Install `rclone` and `inotify-tools` from package manager.
## Run: `rclone config` to setup the remote, including the full remote
##   subdirectory path to sync to.
## MAKE SURE that the remote (sub)directory is EMPTY
##   or else ALL CONTENTS WILL BE DELETED by rclone when it syncs.
## If unsure, add `--dry-run` to the RCLONE_CMD variable below,
##   to simulate what would be copied/deleted.
## Enable your user for Systemd Linger: sudo loginctl enable-linger $USER
## (Reference https://wiki.archlinux.org/title/Systemd/User#Automatic_start-up_of_systemd_user_instances)
## This script is installed using ansible and should not be edited by hand
## Run: `journalctl --user --unit rclone_sync.${RCLONE_REMOTE}` to view the logs.
## For desktop notifications, make sure you have installed a notification daemon (eg. dunst)

# RCLONE_SYNC_PATH: The path to COPY FROM (files are not synced TO here):
RCLONE_SYNC_PATH="{{ item.sync_path }}"

# RCLONE_REMOTE: The rclone remote name to synchronize with.
# Identical to one of the remote names listed via `rclone listremotes`.
# Make sure to include the final `:` in the remote name, which
#   indicates to sync/delete from the same (sub)directory as defined in the URL.
# (ALL CONTENTS of the remote are continuously DELETED
#  and replaced with the contents from RCLONE_SYNC_PATH)
RCLONE_REMOTE="{{ item.sync_remote }}"

# RCLONE_CMD: The sync command and arguments:
## (This example is for one-way sync):
## (Consider using other modes like `bisync` or `move` [see `man rclone` for details]):
RCLONE_CMD="rclone -v sync ${RCLONE_SYNC_PATH} ${RCLONE_REMOTE}"

# WATCH_EVENTS: The file events that inotifywait should watch for:
WATCH_EVENTS=""
for EVENT in "modify" "delete" "create" "move" "attrib"; do
    WATCH_EVENTS+=" -e ${EVENT}"
done

# SYNC_DELAY: Wait this many seconds after an event, before synchronizing:
SYNC_DELAY={{ sync_delay | default(5) }}

# SYNC_INTERVAL: Wait this many seconds between forced synchronizations:
SYNC_INTERVAL={{ sync_interval | default(3600) }}

# NOTIFY_ENABLE: Enable Desktop notifications
NOTIFY_ENABLE={{ rclone_enable_notifications | default('true') }}

# SYNC_SCRIPT: dynamic reference to the current script path
SYNC_SCRIPT=$(realpath $0)

notify() {
    MESSAGE=$1
    if test ${NOTIFY_ENABLE} = "true"; then
        notify-send "rclone ${RCLONE_REMOTE}" "${MESSAGE}"
    fi
}

rclone_sync_{{ item.name }}() {
    set -x
    # Do initial sync immediately:
    notify "Startup"
    ${RCLONE_CMD}
    # Watch for file events and do continuous immediate syncing
    # and regular interval syncing:
    while [[ true ]] ; do
        inotifywait --recursive \
            ${WATCH_EVENTS} \
            ${RCLONE_SYNC_PATH} 2>/dev/null
        status=$?
        if [ $status -eq 0 ]; then
            sleep ${SYNC_DELAY} && ${RCLONE_CMD}
            notify "Synchronized file changes"
        elif [ $status -eq 1 ]; then
            # inotify error occured
            notify "inotifywait error exit code 1"
            sleep 10
        elif [ $status -eq 2 ]; then
            notify "inotify timed out, you did nothing lazy one"
        fi
    done
}

rclone_sync_{{ item.name }}
