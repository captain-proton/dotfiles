#+title: GNU Emacs Home of Captain-Proton
#+author: Captain-Proton
#+startup: showeverything

* Table of contents :toc:
- [[#startupinit-emacs][Startup/Init Emacs]]
- [[#custom-machine-settings][Custom machine settings]]
- [[#package-manager][Package Manager]]
  - [[#general-keybindings][General Keybindings]]
  - [[#emacs][Emacs]]
- [[#evil-mode][Evil Mode]]
- [[#fonts][Fonts]]
  - [[#setup-font-face][Setup Font Face]]
  - [[#zoom-inout][Zoom In/Out]]
- [[#emacs-gui-tweaks][Emacs GUI Tweaks]]
  - [[#disable-the-bars][Disable the bars]]
  - [[#theme][Theme]]
  - [[#modeline][Modeline]]
  - [[#line-numbers][Line Numbers]]
  - [[#rainbows][Rainbows]]
  - [[#escape-the-mini-buffer][Escape the mini buffer]]
- [[#dashboard][Dashboard]]
- [[#projectile][Projectile]]
- [[#completions][Completions]]
  - [[#vertico][Vertico]]
  - [[#orderless][Orderless]]
  - [[#save-history][Save History]]
  - [[#consult][Consult]]
  - [[#marginalia][Marginalia]]
- [[#git][Git]]
  - [[#magit][Magit]]
  - [[#timemachine][Timemachine]]
- [[#org-mode][Org Mode]]
  - [[#table-of-contents][Table of contents]]
  - [[#bullets][Bullets]]
  - [[#header-level-size][Header Level Size]]
  - [[#source-code][Source Code]]
- [[#templates][Templates]]
- [[#sudo-edit][Sudo Edit]]
- [[#which-key][Which key]]

* Startup/Init Emacs

* Custom machine settings

All settings that are unique to the machine should be kept inside the
=user-emacs-dir/local.el= file.

#+begin_src emacs-lisp
(defvar local-settings-file (expand-file-name "local.el" proton/config-directory))
(when (file-exists-p local-settings-file)
  (load local-settings-file))
#+end_src

* Package Manager

I'm using [[https://github.com/progfolio/elpaca][Elpaca]] here.
This project offers some nice features like:

- asynchronous package installs
- cloning original package source code
- improved package management UI

The following block initializes the package manager

#+begin_src emacs-lisp
(defvar elpaca-installer-version 0.6)
(defvar elpaca-directory (expand-file-name "elpaca/" user-emacs-directory))
(defvar elpaca-builds-directory (expand-file-name "builds/" elpaca-directory))
(defvar elpaca-repos-directory (expand-file-name "repos/" elpaca-directory))
(defvar elpaca-order '(elpaca :repo "https://github.com/progfolio/elpaca.git"
                       :ref nil
                       :files (:defaults "elpaca-test.el" (:exclude "extensions"))
                       :build (:not elpaca--activate-package)))
(let* ((repo  (expand-file-name "elpaca/" elpaca-repos-directory))
       (build (expand-file-name "elpaca/" elpaca-builds-directory))
       (order (cdr elpaca-order))
       (default-directory repo))
  (add-to-list 'load-path (if (file-exists-p build) build repo))
  (unless (file-exists-p repo)
    (make-directory repo t)
    (when (< emacs-major-version 28) (require 'subr-x))
    (condition-case-unless-debug err
        (if-let ((buffer (pop-to-buffer-same-window "*elpaca-bootstrap*"))
                 ((zerop (call-process "git" nil buffer t "clone"
                                       (plist-get order :repo) repo)))
                 ((zerop (call-process "git" nil buffer t "checkout"
                                       (or (plist-get order :ref) "--"))))
                 (emacs (concat invocation-directory invocation-name))
                 ((zerop (call-process emacs nil buffer nil "-Q" "-L" "." "--batch"
                                       "--eval" "(byte-recompile-directory \".\" 0 'force)")))
                 ((require 'elpaca))
                 ((elpaca-generate-autoloads "elpaca" repo)))
            (progn (message "%s" (buffer-string)) (kill-buffer buffer))
          (error "%s" (with-current-buffer buffer (buffer-string))))
      ((error) (warn "%s" err) (delete-directory repo 'recursive))))
  (unless (require 'elpaca-autoloads nil t)
    (require 'elpaca)
    (elpaca-generate-autoloads "elpaca" repo)
    (load "./elpaca-autoloads")))
(add-hook 'after-init-hook #'elpaca-process-queues)
(elpaca `(,@elpaca-order))
#+end_src

Packages installed via some commands are not loaded on subsequent Emacs sessions (after restarting).
To install AND load packages persistently (across Emacs restarts), I use the following elpaca macro after the installer.

#+begin_example

;; Install a package via the elpaca macro
;; See the "recipes" section of the manual for more details.

;; (elpaca example-package)
#+end_example

Add support for =use-package=.

#+begin_src emacs-lisp

;; Install use-package support
(elpaca elpaca-use-package
  ;; Enable :elpaca use-package keyword.
  (elpaca-use-package-mode)
  ;; Assume :elpaca t unless otherwise specified.
  (setq elpaca-use-package-by-default t))

;; Block until current queue processed.
(elpaca-wait)

#+end_src

** General Keybindings

[[https://github.com/noctuid/general.el][general.el]]

#+begin_src emacs-lisp

;;When installing a package which modifies a form used at the top-level
;;(e.g. a package which adds a use-package key word),
;;use `elpaca-wait' to block until that package has been installed/configured.
;;For example:

(use-package general
  :demand t
  :config
  (general-evil-setup)
  ;; set 'SPC' as global leader key
  (general-create-definer proton/leader-keys
    :states '(normal insert visual emacs)
    :keymaps 'override
    :prefix "SPC"
    :global-prefix "M-SPC") ;; access leader key in insert mode

  (defun proton/edit-config ()
    (interactive)
    (find-file (expand-file-name "config.org" proton/config-directory))
  )

  (proton/leader-keys
   "." '(find-file :wk "Find file")
   "f c" '(proton/edit-config :wk "Edit config.org")
   )

  (proton/leader-keys
   "b" '(:ignore t :wk "Buffer") ;; just a prefix, no real key binding
   "b b" '(switch-to-buffer :wk "Switch buffer")
   "b i" '(ibuffer :wk "IBuffer")
   "b k" '(kill-this-buffer :wk "Kill buffer")
   "b n" '(next-buffer :wk "Next buffer")
   "b p" '(previous-buffer :wk "Previous buffer")
   "b r" '(revert-buffer :wk "Reload buffer")
   "b s" '(save-buffer :wk "Save buffer")
   )

  (proton/leader-keys
   "h" '(:ignore t :wk "Help") ;; just a prefix, no real key binding
   "h f" '(describe-function :wk "Describe function")
   "h k" '(describe-key :wk "Describe key")
   "h m" '(describe-keymap :wk "Describe keymap")
   "h p" '(describe-package :wk "Describe package")
   "h r r" '((lambda () (interactive)
	       (load-file (expand-file-name "init.el" user-emacs-directory))
	       (ignore (elpaca-process-queues)))
	     :wk "Reload emacs config")
   "h v" '(describe-variable :wk "Describe variable")
   )

  (proton/leader-keys
   "m" '(:ignore t :wk "Org")
   "m l" '(org-insert-link :wk "Insert link")
   )

  (proton/leader-keys
   "e" '(:ignore t :wk "Evaluate")
   "e b" '(eval-buffer :wk "Eval buffer")
   "e e" '(eval-expression :wk "Evaluate and elisp expression")
   "e r" '(eval-region :wk "Eval region")
   )

  )
(elpaca-wait)
#+end_src

** Emacs

#+begin_src emacs-lisp
(use-package emacs
  :elpaca nil
  :init
  ;; Add prompt indicator to `completing-read-multiple'.
  ;; We display [CRM<separator>], e.g., [CRM,] if the separator is a comma.
  (defun crm-indicator (args)
    (cons (format "[CRM%s] %s"
                  (replace-regexp-in-string
                   "\\`\\[.*?]\\*\\|\\[.*?]\\*\\'" ""
                   crm-separator)
                  (car args))
          (cdr args)))
  (advice-add #'completing-read-multiple :filter-args #'crm-indicator)

  ;; Do not allow the cursor in the minibuffer prompt
  (setq minibuffer-prompt-properties
        '(read-only t cursor-intangible t face minibuffer-prompt))
  (add-hook 'minibuffer-setup-hook #'cursor-intangible-mode)

  ;; Enable recursive minibuffers
  (setq enable-recursive-minibuffers t))
#+end_src

* Evil Mode

[[https://github.com/emacs-evil/evil][Evil - extensible vi layer for emacs]]

#+begin_src emacs-lisp

;; Expands to: (elpaca evil (use-package evil :demand t))
;;(use-package evil :demand t)
(use-package evil
  :init  ;; tweak evil before loading it
  (setq evil-want-integration t)
  (setq evil-want-keybinding nil)  ;; do not load default evil keybindings
  (setq evil-vsplit-window-right t)
  (setq evil-split-window-below t)
  (evil-mode)
  :config
  
  (proton/leader-keys
   "b N" '(evil-buffer-new :wk "Open a new empty buffer")
   )
)

(use-package evil-collection
  :after evil
  :config
  ;; Do not uncomment this unless you want to specify each and every mode
  ;; that evil-collection should works with.  The following line is here 
  ;; for documentation purposes in case you need it.  
  ;; (setq evil-collection-mode-list '(calendar dashboard dired ediff info magit ibuffer))
  (add-to-list 'evil-collection-mode-list 'help) ;; evilify help mode
  (evil-collection-init))

(use-package evil-tutor)
#+end_src

#+begin_src emacs-lisp
;; Using RETURN to follow links in Org/Evil 
;; Unmap keys in 'evil-maps if not done, (setq org-return-follows-link t) will not work
(with-eval-after-load 'evil-maps
  (define-key evil-motion-state-map (kbd "SPC") nil)
  (define-key evil-motion-state-map (kbd "RET") nil)
  (define-key evil-motion-state-map (kbd "TAB") nil))
#+end_src

*** Nerd Commenter
A Nerd Commenter emulation, help you comment code efficiently.
For example, you can press “99,ci” to comment out 99 lines.

#+begin_src emacs-lisp
(use-package evil-nerd-commenter
    :after evil
    :config
    (evilnc-default-hotkeys))
#+end_src

* Fonts

** Setup Font Face

#+begin_src emacs-lisp
(defvar proton/fixed-width-font "JetBrainsMono NF"
  "The font to use for monospaced (fixed width) text.")

(defvar proton/variable-width-font "Fira Sans"
  "The font to use for variable-pitch (document) text.")

(set-face-attribute 'default nil
                    :font proton/fixed-width-font
                    :height 110
                    :weight 'medium)
(set-face-attribute 'variable-pitch nil
                    :font proton/variable-width-font
                    :height 120
                    :weight 'medium)
(set-face-attribute 'fixed-pitch nil
                    :font proton/fixed-width-font
                    :height 110
                    :weight 'medium)
;; Makes commented text and keywords italics.
;; This is working in emacsclient but not emacs.
;; Your font must have an italic face available.
(set-face-attribute 'font-lock-comment-face nil
                    :slant 'italic)
(set-face-attribute 'font-lock-keyword-face nil
                    :slant 'italic)

;; Uncomment the following line if line spacing needs adjusting.
(setq-default line-spacing 0.12)
#+end_src

** Zoom In/Out

#+begin_src emacs-lisp
(setq text-scale-mode-step 1.05)
(defun proton/text-scale-reset ()
  (interactive)
  (text-scale-adjust 0))
(global-set-key (kbd "C-+") 'text-scale-increase)
(global-set-key (kbd "C--") 'text-scale-decrease)
(global-set-key (kbd "C-=") 'proton/text-scale-reset)
#+end_src

* Emacs GUI Tweaks

** Disable the bars

#+begin_src emacs-lisp
(menu-bar-mode -1)
(tool-bar-mode -1)
(scroll-bar-mode -1)
#+end_src

** Theme

#+begin_src emacs-lisp
(add-to-list 'custom-theme-load-path (expand-file-name (concat user-emacs-directory "themes/")))
(use-package doom-themes
  :config
  (setq doom-themes-enable-bold t    ; if nil, bold is universally disabled, t by default
        doom-themes-enable-italic t) ; if nil, italics is universally disabled, t by default
  ;; This is the default theme
  (load-theme 'doom-nord t)
  ;; Corrects (and improves) org-mode's native fontification.
  (doom-themes-org-config))
#+end_src

** Modeline

#+begin_src emacs-lisp
(use-package doom-modeline
  :ensure t
  :init (doom-modeline-mode 1)
  :config
  (setq doom-modeline-height 24      ;; sets modeline height
        doom-modeline-bar-width 5    ;; sets right bar width
        doom-modeline-persp-name t   ;; adds perspective name to modeline
        doom-modeline-persp-icon t)) ;; adds folder icon next to persp name
#+end_src


** Line Numbers

#+begin_src emacs-lisp
(setq display-line-numbers-type 'relative)
(global-display-line-numbers-mode 1)
(global-visual-line-mode t)

;; Disable line numbers for some modes
(dolist (mode '(term-mode-hook
                eshell-mode-hook))
  (add-hook mode (lambda () (display-line-numbers-mode 0))))
#+end_src

** Rainbows

The delimiters add colors to paratheses.

#+begin_src emacs-lisp
(use-package rainbow-delimiters
  :hook (prog-mode . rainbow-delimiters-mode))
#+end_src

#+begin_src emacs-lisp
(use-package rainbow-mode
  :diminish
  :hook
  ((org-mode prog-mode) . rainbow-mode))
#+end_src

** Escape the mini buffer

You have to type escape three time to quit the mini buffer.
Decrease the amount to one.
/Hint: Use ~C-g~ to quit./

#+begin_src emacs-lisp
(global-set-key [escape] 'keyboard-escape-quit)
#+end_src

* Dashboard

#+begin_src emacs-lisp
(use-package dashboard
  :ensure t 
  :init
  (setq initial-buffer-choice 'dashboard-open)
  (setq dashboard-set-heading-icons t)
  (setq dashboard-set-file-icons t)
  (setq dashboard-startup-banner 'logo) ;; use standard emacs logo as banner
  ;; (setq dashboard-startup-banner "/home/dt/.config/emacs/images/emacs-dash.png")  ;; use custom image as banner
  (setq dashboard-center-content nil) ;; set to 't' for centered content
  (setq dashboard-items '((recents . 5)
                          (bookmarks . 3)
                          (projects . 5)
                          (registers . 3)))
  :custom
  (dashboard-modify-heading-icons '((recents . "file-text")
                                    (bookmarks . "book")))
  :config
  (dashboard-setup-startup-hook))
#+end_src
* Projectile

[[https://github.com/bbatsov/projectile][Projectile on GitHub]]

#+begin_quote
Projectile is a project interaction library for Emacs.
#+end_quote

#+begin_src emacs-lisp
(use-package projectile
  :ensure t
  :config
  (projectile-mode +1)
  (proton/leader-keys
    "p" '(:ignore t :wk "Project")
    "p d" '(projectile-discover-projects-in-search-path :wk "Discover projects")
    "p e" '(projectile-edit-dir-locals :wk "Edit project .dir-locals.el")
    "p i" '(projectile-invalidate-cache :wk "Invalidate project cache")
    "p p" '(projectile-switch-project :wk "Switch project")
    "SPC" '(projectile-find-file :wk "Find file in project")
  )
)
#+end_src

* Completions

** Vertico

[[https://github.com/minad/vertico][Vertico on github]]

#+begin_quote
Vertico provides a performant and minimalistic vertical completion UI based on the default completion system.
#+end_quote

#+begin_src emacs-lisp
(use-package vertico
  :ensure t
  :bind (:map vertico-map
         ("C-j" . vertico-next)
         ("C-k" . vertico-previous)
         ("C-f" . vertico-exit)
         :map minibuffer-local-map
         ("M-h" . backward-kill-word))
  :custom
  (vertico-cycle t)
  :init
  (vertico-mode))
#+end_src

** Orderless

#+begin_src emacs-lisp
(use-package orderless
  :init
  (setq completion-styles '(orderless)
        completion-category-defaults nil
        completion-category-overrides '((file (styles partial-completion)))))
#+end_src

** Save History

#+begin_src emacs-lisp
(use-package savehist
  :elpaca nil  ;; built-in to emacs, no package manager required
  :init
  (savehist-mode))
#+end_src

** Consult

[[https://github.com/minad/consult][Consult on GitHub]]

#+begin_quote
Consult provides search and navigation commands based on the Emacs completion function completing-read.
#+end_quote

#+begin_src emacs-lisp
(use-package consult
  :config
  (proton/leader-keys
    "<" '(consult-buffer :wk "Consult buffer")
    "RET" '(consult-bookmark :wk "Consult bookmark")
    "f r" '(consult-recent-file :wk "Consult recent file")
    "m h" '(consult-org-heading :wk "Consult org heading")
    "s" '(:ignore t :wk "Search")
    "s r" '(consult-ripgrep :wk "Consult rg")
    "s g" '(consult-grep :wk "Consult grep")
    "s G" '(consult-git-grep :wk "Consult git grep")
    "s f" '(consult-find :wk "Consult find")
    "s F" '(consult-fd :wk "Consult fd")
    "s b" '(consult-line :wk "Consult line")
    "S" '(:ignore t :wk "Additional Search")
    "S y" '(consult-yank-from-kill-ring :wk "Consult yank from kill ring")
    "i" '(consult-imenu :wk "Consult imenu"))
  )
#+end_src

** Marginalia

[[https://github.com/minad/marginalia][Marginalia on GitHub]]

#+begin_src emacs-lisp
(use-package marginalia
  :after vertico
  :ensure t
  :custom
  (marginalia-annotators '(marginalia-annotators-heavy marginalia-annotators-light nil))
  :init
  (marginalia-mode))
#+end_src

* Git

** Magit

The git client for emacs.

#+begin_src emacs-lisp
;; builtin transient is to old, get it from package repos
(use-package transient)
(use-package magit
  :init
  ;; Do not call on :config as this block
  ;; is executed after opening magit
  (proton/leader-keys
    "g" '(:ignore t :wk "Git")
    "g g" '(magit :wk "Open magit buffer")
  )
  :commands
  (magit-status magit-get-current-branch)
  :custom
  (magit-display-buffer-function #'magit-display-buffer-same-window-except-diff-v1)
)
#+end_src

** Timemachine

git-timemachine is a program that allows you to move backwards and forwards through a file’s commits.  ‘SPC g t’ will open the time machine on a file if it is in a git repo.  Then, while in normal mode, you can use ‘CTRL-j’ and ‘CTRL-k’ to move backwards and forwards through the commits.

#+begin_src emacs-lisp
(use-package git-timemachine
  :init
  (proton/leader-keys
    "g t" '(git-timemachine-toggle :wk "Toggle git timemachine")
  )
  :hook (evil-normalize-keymaps . git-timemachine-hook)
  :config
  (evil-define-key 'normal git-timemachine-mode-map (kbd "C-j") 'git-timemachine-show-previous-revision)
  (evil-define-key 'normal git-timemachine-mode-map (kbd "C-k") 'git-timemachine-show-next-revision)
)
(with-eval-after-load 'general
)
#+end_src

* Org Mode

#+begin_src emacs-lisp
(setq org-return-follows-link t)
(setq org-hide-emphasis-markers t)
#+end_src

If you use `org' and don't want your org files in the default location below,
change `org-directory'. It must be set before org loads!

#+begin_src emacs-lisp
(defvar proton/org-notes-dir (file-truename "~/Org/notes")
  "Directory containing all my org notes files")
(setq org-directory proton/org-notes-dir
      org-agenda-files (list proton/org-notes-dir))
#+end_src

Anything else at the moment can be set after org was loaded.

#+begin_src emacs-lisp
(with-eval-after-load 'org
  (setq org-log-done 'time
	org-todo-keywords
	'((sequence
	   "DOING(o)"           ; Things that are currently in work (work in progress)
	   "TODO(t)"            ; Backlog items in kanban that should be executed
	   "WAIT(w)"            ; A task that can not be set as DOING
	   "|"                  ; Separate active and inactive items
	   "DONE(d)"            ; Finished work ... yeah
	   "CANCELLED(c@)"))    ; Cancelled things :(
	org-todo-repeat-to-state "TODO"
	org-ellipsis " ▾"
	org-hide-emphasis-markers t
	org-superstar-headline-bullets-list '("⁖" "◉" "○" "✸" "✿"))
  )
#+end_src

** Table of contents

Enable table of contents for org-mode and markdown-mode.

#+begin_src emacs-lisp
(use-package toc-org
  :commands toc-org-enable
  :init
  (add-hook 'org-mode-hook 'toc-org-enable)
  ;; enable in markdown, too
  (add-hook 'markdown-mode-hook 'toc-org-mode)
  )
#+end_src

** Bullets

By default emacs displays asterisks in org-mode for headers.
These can be adjusted by using =org-bullets=.
In addition the =org-indent-mode= is activated to automatically indent the content under a heading.

#+begin_src emacs-lisp
(add-hook 'org-mode-hook 'org-indent-mode)
(use-package org-bullets)
(add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))
#+end_src

** Header Level Size

#+begin_src emacs-lisp
(custom-set-faces
 '(org-level-1 ((t (:inherit outline-1 :height 1.5))))
 '(org-level-2 ((t (:inherit outline-2 :height 1.4))))
 '(org-level-3 ((t (:inherit outline-3 :height 1.3))))
 '(org-level-4 ((t (:inherit outline-4 :height 1.2))))
 '(org-level-5 ((t (:inherit outline-5 :height 1.1))))
 )
#+end_src

** Source Code

Org may add [[https://github.com/syl20bnr/spacemacs/issues/13255][unwanted indentation]], using evil and entering insert mode.
Use the following to overcome the issue.

#+begin_src emacs-lisp
(setq org-src-preserve-indentation t)
#+end_src

* Templates

#+begin_src emacs-lisp
;; Configure Tempel
(use-package tempel
  ;; Require trigger prefix before template name when completing.
  ;; :custom
  ;; (tempel-trigger-prefix "<")
  :init

  ;; Setup completion at point
  (defun tempel-setup-capf ()
    ;; Add the Tempel Capf to `completion-at-point-functions'.
    ;; `tempel-expand' only triggers on exact matches. Alternatively use
    ;; `tempel-complete' if you want to see all matches, but then you
    ;; should also configure `tempel-trigger-prefix', such that Tempel
    ;; does not trigger too often when you don't expect it. NOTE: We add
    ;; `tempel-expand' *before* the main programming mode Capf, such
    ;; that it will be tried first.
    (setq-local completion-at-point-functions
                (cons #'tempel-expand
                      completion-at-point-functions)))

  (add-hook 'org-mode-hook 'tempel-setup-capf)
  (add-hook 'conf-mode-hook 'tempel-setup-capf)
  (add-hook 'prog-mode-hook 'tempel-setup-capf)
  (add-hook 'text-mode-hook 'tempel-setup-capf)

  ;; Optionally make the Tempel templates available to Abbrev,
  ;; either locally or globally. `expand-abbrev' is bound to C-x '.
  ;; (add-hook 'prog-mode-hook #'tempel-abbrev-mode)
  ;; (global-tempel-abbrev-mode)
  :config
  
  (proton/leader-keys
   "t" '(:ignore t :wk "Templates")
   "t c" '(tempel-complete :wk "Complete")
   "t i" '(tempel-complete :wk "Insert")
   )
)

;; Optional: Add tempel-collection.
;; The package is young and doesn't have comprehensive coverage.
(use-package tempel-collection
  :after tempel)
#+end_src

* Sudo Edit

#+begin_src emacs-lisp
(use-package sudo-edit
  :config
  (proton/leader-keys
    "f" '(:ignore t :wk "Files")
    "f u" '(sudo-edit-find-file :wk "Sudo find file")
    "f U" '(sudo-edit :wk "Sudo edit file")
  )
)
#+end_src

* Which key

#+begin_src emacs-lisp

(use-package which-key
  :init
  (which-key-mode)
  :config
  (setq which-key-side-window-location 'bottom
	which-key-sort-order #'which-key-key-order-alpha
	which-key-sort-uppercase-first nil
	which-key-min-display-lines 6
	which-key-side-window-max-height 0.25
	which-key-idle-delay 0.3
	which-key-separator "  " ))
#+end_src
